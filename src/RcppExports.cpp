// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// DeCAFSmain
List DeCAFSmain(std::vector<double> vectData, double beta, double lambda, double gamma, double phi, std::string type);
RcppExport SEXP _DeCAFS_DeCAFSmain(SEXP vectDataSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP gammaSEXP, SEXP phiSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type vectData(vectDataSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(DeCAFSmain(vectData, beta, lambda, gamma, phi, type));
    return rcpp_result_gen;
END_RCPP
}
// dataAR_c
List dataAR_c(const double& phi, const double& epsilon0, const std::vector<double>& mu, const std::vector<double>& ynoise);
RcppExport SEXP _DeCAFS_dataAR_c(SEXP phiSEXP, SEXP epsilon0SEXP, SEXP muSEXP, SEXP ynoiseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsilon0(epsilon0SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type ynoise(ynoiseSEXP);
    rcpp_result_gen = Rcpp::wrap(dataAR_c(phi, epsilon0, mu, ynoise));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_DeCAFS_DeCAFSmain", (DL_FUNC) &_DeCAFS_DeCAFSmain, 6},
    {"_DeCAFS_dataAR_c", (DL_FUNC) &_DeCAFS_dataAR_c, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_DeCAFS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
